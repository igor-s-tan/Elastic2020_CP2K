#!/usr/bin/env python
#%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%#
#%!%!% ------------------------------ ElaStic_Setup_ESPRESSO ------------------------------- %!%!%#
#%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%#
#
# AUTHOR:
# Rostam Golesorkhtabar
# r.golesorkhtabar@gmail.com
# 
# DATE:
# Sun Jan 01 00:00:00 2012
#
# SYNTAX:
# python ElaStic_Setup_ESPRESSO.py
#        ElaStic_Setup_ESPRESSO
# 
# EXPLANATION:
# 
#__________________________________________________________________________________________________

from elastic_dictionaries import *

from sys   import stdin
from numpy import *
import numpy as np
import subprocess
import os.path
import shutil
import glob
import math
import sys
import os

def vec2param(vec):
    
    params, angles = [0, 0, 0], [0, 0, 0]
    params[0] = np.linalg.norm(vec[0])
    params[1] = np.linalg.norm(vec[1])
    params[2] = np.linalg.norm(vec[2])
    
    angles[0] = np.arccos(np.dot(vec[1], vec[2]) / params[1] / params[2]) * 180 / np.pi
    angles[1] = np.arccos(np.dot(vec[0], vec[2]) / params[0] / params[2]) * 180 / np.pi
    angles[2] = np.arccos(np.dot(vec[1], vec[0]) / params[1] / params[0]) * 180 / np.pi
    
    return np.array(params), np.array(angles)
    
def param2vec(params, angles):
    vec = np.zeros((3,3))
    vec[0,0] = params[0]
    vec[0,1] = 0.0
    vec[0,2] = 0.0
    vec[1,0] = params[1]*np.cos(angles[2])
    vec[1,1] = params[1]*np.sin(angles[2])
    vec[1,2] = 0.0
    vec[2,0] = params[2]*np.cos(angles[1])
    vec[2,1] =(params[2]*(np.cos(angles[0])-np.cos(angles[1])*np.cos(angles[2])))/np.sin(angles[2])
    vec[2,2] = params[2]*np.sqrt(1.-np.cos(angles[0])**2.-np.cos(angles[1])**2.-np.cos(angles[2])**2.+\
              2.*np.cos(angles[0])*np.cos(angles[1])*np.cos(angles[2]))/np.sin(angles[2])
    return vec

#%!%!%--- Reading the SCF method ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%
print("\n     QUANTUM-ESPRESSO  ---=>  1    \
       \n     CP2K  ---=>  2    ")
num = int(input('>>>> Please choose the SCF method (choose 1 or 2): '))
if (num != 1 and num != 2):
    sys.exit("\n.... Oops ERROR: Choose '1' or '2' \n")
if (num == 1 ): driver = 'ESPRESSO'
if (num == 2 ): 
    driver = 'CP2K'
    xyz_file = input('>>>> Please write the path to the XYZ file ')
    if (os.path.exists(xyz_file.strip()) == False):
        sys.exit('\n.... Oops ERROR: There is NO '+ xyz_file +' file !?!?!?    \n')

#%!%!%--- Directory Management ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%
OLDlist = glob.glob('Dst??_old')
for Dstn_old in OLDlist:
    shutil.rmtree(Dstn_old)

Dstlist = glob.glob('Dst??')
for Dstn in Dstlist:
    os.rename(Dstn, Dstn+'_old')

if (os.path.exists(f'Structures_{driver}_old')):
    shutil.rmtree(f'Structures_{driver}_old')

if (os.path.exists(f'Structures_{driver}')):
    os.rename(f'Structures_{driver}', f'Structures_{driver}_old')
#--------------------------------------------------------------------------------------------------

#%!%!%--- Reading the method of the elastic constants calculations ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%
print("\n     Energy  ---=>  1    \
       \n     Stress  ---=>  2    ")
num = int(input('>>>> Please choose the method of the calculation (choose 1 or 2): '))
if (num != 1 and num != 2):
    sys.exit("\n.... Oops ERROR: Choose '1' or '2' \n")
if (num == 1 ): mthd = 'Energy'
if (num == 2 ): mthd = 'Stress'
#--------------------------------------------------------------------------------------------------

#%!%!%--- Reading the order of the elastic constants ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%
print('\n     2nd  ---=>  2    \
       \n     3rd  ---=>  3    ')
ordr = int(input('>>>> Please choose the order of the elastic constant (choose 2 or 3): '))
if (ordr != 2 and ordr != 3 ):
    sys.exit("\n.... Oops ERROR: Choose '2' or '3' \n")
#--------------------------------------------------------------------------------------------------
#%!%!%--- Reading the maximum Lagrangian strain ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!
if (mthd == 'Energy'):
    mdr = float(input('\n>>>> Please enter the maximum Lagrangian strain '\
                '\n     The suggested value is between 0.030 and 0.150: '))
if (mthd == 'Stress'):
    mdr = float(input('\n>>>> Please enter the maximum Lagrangian strain '\
                '\n     The suggested value is between 0.0010 and 0.0050: '))

if (1 < mdr or mdr < 0):
    sys.exit('\n.... Oops ERROR: The maximum Lagrangian strain is out of range !!!!!!    \n')
mdr = round(mdr, 3)
print( '     The maximum Lagrangian strain is '+ str(mdr) + '\n')
#--------------------------------------------------------------------------------------------------

#%!%!%--- Reading the number of the distorted structures ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%
NoP = int(input('>>>> Please enter the number of the distorted structures [odd number > 4]: '))
NoP = int(abs(NoP))

if (NoP < 5):
    sys.exit('\n.... Oops ERROR: The NUMBER of the distorted structures < 5 !!!!!!    \n')
if (99 < NoP):
    sys.exit('\n.... Oops ERROR: The NUMBER of the distorted structures > 99 !!!!!!   \n')

if (NoP%2 == 0):
    NoP   += 1
print( '     The number of the distorted structures is '+ str(NoP) + '\n')

ptn = int((NoP-1)/2)

if (mthd == 'Energy'): interval = 0.0001
if (mthd == 'Stress'): interval = 0.00001

if (mdr/ptn <= interval):
    sys.exit('.... Oops ERROR: The interval of the strain values is < '+ str(interval) +\
           '\n                 Choose a larger maximum Lagrangian strain'\
           '\n                 or a less number of distorted structures.\n')
#--------------------------------------------------------------------------------------------------

def getLagStrainList(mthd, ordr, LC):
    if mthd == "Energy":
        result = lag_strain_dict_energy[ordr][LC]
    else:
        result = lag_strain_dict_stress[ordr][LC]
    if not result:
        raise NotImplementedError(f"{mthd} method of order {ordr} is not implemented for {LT_Dic[LC]} systems")
    return result

def writeQE(Dstn_cont2, TMP, M_new):
    fo = open(Dstn_cont2 +'.in', 'w')
    print(Dstn_cont2,file=fo)
    print(TMP,file=fo)
    for j in range(3):
        print('%15.10f'%(M_new[j,0]), '%15.10f'%(M_new[j,1]), '%15.10f'%(M_new[j,2]),file=fo)
    fo.close()
    
def writeCP2K(Dstn_cont2, TMP, M_new, OATPO, params, angles):
    
    OATPO_TEMP = []
    for atom in OATPO:
        temp = np.matmul(np.transpose(M_new), np.array([atom[1], atom[2], atom[3]]))
        OATPO_TEMP.append([atom[0], temp[0], temp[1], temp[2]])
    # write c2pk input
    new_params, new_angles = vec2param(M_new)
    with open(Dstn_cont2 +'.inp', 'w', encoding="utf-8") as fo:
        TMP = TMP[:TMP.index("COORD_FILE_NAME")+15] + f" {Dstn_cont2}.xyz " + TMP[(TMP[TMP.index("COORD_FILE_NAME")+15:]).index(r"\n") + TMP.index("COORD_FILE_NAME")+15:]
        TMP = TMP[:TMP.index("ABC")+3] + f" {' '.join([str(k) for k in new_params])} " + TMP[(TMP[TMP.index("ABC")+3:]).index(r"\n") + TMP.index("ABC")+3:]
        TMP = TMP[:TMP.index("ALPHA_BETA_GAMMA")+16] + f" {' '.join([str(k) for k in new_angles])} " + TMP[(TMP[TMP.index("ALPHA_BETA_GAMMA")+16:]).index(r"\n") + TMP.index("ALPHA_BETA_GAMMA")+16:]
        fo.write(TMP.replace(r'\n', "\n").replace(r'\t', "\t")[1:-1])
       
    # write xyz input
    with open(f"{Dstn_cont2}.xyz", 'w', encoding="utf-8") as fo:
        string = f"{len(OATPO_TEMP)}\n"
        string += f"{Dstn_cont2} distorted structure\n"
        for atom in OATPO_TEMP:
            string += f"{atom[0]} {atom[1]} {atom[2]} {atom[3]}\n"
        fo.write(string)
        

def calcSGroupNumber(nat, OATPO, a1, a2, a3, alpha, beta, gamma):
    si = open('sgroup.in','w')
    print('P',file=si)
    si.write(f"{a1:.15f} {a2:.15f} {a3:.15f} {np.degrees(alpha):.15f} {np.degrees(beta):.15f} {np.degrees(gamma):.15f}\n\n")
    print(nat,file=si)
    for i in range(nat-1,-1,-1):
        si.write(f"{float(OATPO[i][1]):.15f} {float(OATPO[i][2]):.15f} {float(OATPO[i][3]):.15f}\n{OATPO[i][0]}\n")

    si.close()
    
    os.system('sgroup sgroup.in 1>sgroup.out 2>sgroup.err')
# ; rm -f sgroup.in
    if (os.path.getsize('sgroup.err') != 0):
        fer  = open('sgroup.err', 'r')
        lines= fer.readlines()
        print( '\n.... Oops '+ lines[0])
        for i in range(1, len(lines)):
            print( '                 '+ lines[i])
        fer.close()
        sys.exit()
    else: os.system('rm -f sgroup.err')

    SGf   = open('sgroup.out', 'r')
    SGlins= SGf.readlines()
    SGf.close()

    for i in range(len(SGlins)):
        if (SGlins[i].find('Number and name of space group:') >= 0):
            SGN = int(float(SGlins[i].split()[6]))
            SGN_explanation = SGlins[i].strip()
            break

    if (1 <= SGN and SGN <= 2):      # Triclinic
        LC = 'N'
        if (ordr == 2): ECs = 21
        if (ordr == 3): ECs = 56  

    elif(3 <= SGN and SGN <= 15):    # Monoclinic
        LC = 'M'
        if (ordr == 2): ECs = 13
        if (ordr == 3): ECs = 32 

    elif(16 <= SGN and SGN <= 74):   # Orthorhombic
        LC = 'O'
        if (ordr == 2): ECs =  9
        if (ordr == 3): ECs = 20 

    elif(75 <= SGN and SGN <= 88):   # Tetragonal II
        LC = 'TII'
        if (ordr == 2): ECs =  7
        if (ordr == 3): ECs = 16
      
    elif(89 <= SGN and SGN <= 142):  # Tetragonal I
        LC = 'TI'
        if (ordr == 2): ECs =  6
        if (ordr == 3): ECs = 12  

    elif(143 <= SGN and SGN <= 148): # Rhombohedral II 
        LC = 'RII'
        if (ordr == 2): ECs =  7
        if (ordr == 3): ECs = 20

    elif(149 <= SGN and SGN <= 167): # Rhombohedral I
        LC = 'RI'
        if (ordr == 2): ECs =  6
        if (ordr == 3): ECs = 14

    elif(168 <= SGN and SGN <= 176): # Hexagonal II
        LC = 'HII'
        if (ordr == 2): ECs =  5
        if (ordr == 3): ECs = 12

    elif(177 <= SGN and SGN <= 194): # Hexagonal I
        LC = 'HI'
        if (ordr == 2): ECs =  5
        if (ordr == 3): ECs = 10

    elif(195 <= SGN and SGN <= 206): # Cubic II
        LC = 'CII'
        if (ordr == 2): ECs =  3
        if (ordr == 3): ECs =  8

    elif(207 <= SGN and SGN <= 230): # Cubic I
        LC = 'CI'
        if (ordr == 2): ECs =  3
        if (ordr == 3): ECs =  6

    else: sys.exit('\n.... Oops ERROR: WRONG Space-Group Number !?!?!?\n')

    if (ordr == 2): order = 'second'
    if (ordr == 3): order = 'third'
    print( '\n     '+ SGN_explanation +'\
           \n     '+ LC_Dic[LC] +' structure in the Laue classification.\
           \n     This structure has '+ str(ECs) +' independent '+ order +'-order elastic constants.')
           
    return LC, SGN



def readStructureQE():
    #%!%!%--- Checking the input file exist ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!
    INF = input('\n>>>> Please enter the name of the Quantum-ESPRESSO input file: ')
    if (os.path.exists(INF.strip()) == False):
        sys.exit('\n.... Oops ERROR: There is NO '+ INF +' file !?!?!?    \n')
    fi = open(INF.strip(), 'r')
    EIF = fi.read()
    fi.close()
    #--------------------------------------------------------------------------------------------------

    #%!%!%--- Check whether the essential NAMELISTs exist in the input file ---%!%!%!%!%!%!%!%!%!%!%!%!
    num1 = EIF.upper().find('&CONTROL')
    if (num1 == -1):
        sys.exit('\n.... Oops ERROR: There is NO "&CONTROL" NAMELIST in the input file !?!?!?'\
                 '\n                 Visit http://www.quantum-espresso.org \n')
    num2 = EIF.upper().find('&SYSTEM')
    if (num2 == -1):
        sys.exit('\n.... Oops ERROR: There is NO "&SYSTEM" NAMELIST in the input file !?!?!?'\
                 '\n                 Visit http://www.quantum-espresso.org \n')
    num3 = EIF.upper().find('&ELECTRONS')
    if (num3 == -1):
        sys.exit('\n.... Oops ERROR: There is NO "&ELECTRONS" NAMELIST in the input file !?!?!?'\
                 '\n                 Visit http://www.quantum-espresso.org \n')
    if (num2 <= num1 or num3 <= num2 ):
        sys.exit('\n.... Oops ERROR: NAMELISTs are NOT sequence in the input file !?!?!?'\
                 '\n                 Visit http://www.quantum-espresso.org \n')

    num4 = EIF.upper().find('ATOMIC_SPECIES')
    if (num4 == -1):
        sys.exit('\n.... Oops ERROR: "ATOMIC_SPECIES" card must be specified in the input file !?!?!?'\
                 '\n                 Visit http://www.quantum-espresso.org \n')
    num5 = EIF.upper().find('ATOMIC_POSITIONS')
    if (num5 == -1):
        sys.exit('\n.... Oops ERROR: "ATOMIC_POSITIONS" card must be specified in the input file !?!?!?'\
                 '\n                 Visit http://www.quantum-espresso.org \n')
    #--------------------------------------------------------------------------------------------------

    #%!%!%--- Reading the title and &CONTROL NAMELIST ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!
    title = EIF[0:EIF.upper().find('&CONTROL')].strip()

    CONTROL     = EIF[EIF.upper().find('&CONTROL'):EIF.upper().find('&SYSTEM')].strip()
    CONTROL     = CONTROL.replace(',',' ')
    CONTROL     = CONTROL.replace('=',' = ')
    CONTROLlist = CONTROL.strip().split()

    if (CONTROL.lower().find('calculation') != -1):
        for i, key in enumerate(CONTROLlist):
            if (key=='calculation'): CONTROLlist[i+2] = "'relax'"
    else:
        CONTROLlist.insert(1,"'relax'")
        CONTROLlist.insert(1,'=')
        CONTROLlist.insert(1,'calculation')

    if (CONTROL.lower().find('tstress') != -1 ):
        for i, key in enumerate(CONTROLlist):
            if (key=='tstress'): CONTROLlist[i+2] = '.true.'
    else:
        CONTROLlist.insert(-1,'tstress')
        CONTROLlist.insert(-1,'=')
        CONTROLlist.insert(-1,'.true.')

    if (CONTROL.lower().find('tprnfor') != -1):
        for i, key in enumerate(CONTROLlist):
            if (key=='tprnfor'): CONTROLlist[i+2] = '.true.'
    else:
        CONTROLlist.insert(-1,'tprnfor')
        CONTROLlist.insert(-1,'=')
        CONTROLlist.insert(-1,'.true.')
    #--------------------------------------------------------------------------------------------------

    #%!%!%--- Reading the &SYSTEM NAMELIST ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%
    SYSTEM     = EIF[EIF.upper().find('&SYSTEM'):EIF.upper().find('&ELECTRONS')].strip()
    SYSTEM     = SYSTEM.replace(',',' ')
    SYSTEM     = SYSTEM.replace('=',' = ')
    SYSTEMlist = SYSTEM.strip().split()

    if (SYSTEM.lower().find('ibrav') == -1):
        sys.exit('\n.... Oops ERROR: "ibrav" must be specified in "&SYSTEM" NAMELIST !?!?!?'\
                 '\n                 Visit http://www.quantum-espresso.org \n')
    for i, key in enumerate(SYSTEMlist):
        if (key == 'ibrav'):
            ibrav = int(SYSTEMlist[i+2])

    #if (SYSTEM.lower().find('celldm(1)') == -1):
    #    sys.exit('\n.... Oops ERROR: "celldm(1)" must be specified in "&SYSTEM" NAMELIST !?!?!?'\
    #             '\n                 Visit http://www.quantum-espresso.org \n')
    for i, key in enumerate(SYSTEMlist):
        if (key == 'celldm(1)'):
            celldm1 = float(SYSTEMlist[i+2])

    #---Free structures--------------------------------------------------------------------------------
    if (ibrav == 0):
        if (EIF.upper().find('CELL_PARAMETERS') == -1 ):
            sys.exit('\n.... Oops ERROR: "CELL_PARAMETERS" must be specified for the case ibrav = 0'\
                     '\n                 Visit http://www.quantum-espresso.org !?!?!? \n')
        EIF2 = EIF.split('\n')
        for nl, line in enumerate(EIF2):
            if (line.find('CELL_PARAMETERS') != -1):
                M = []
                nx = 0
                nb = 1
                while (nx < 3):
                    if (nl+nb > len(EIF2)):
                        break
                    tmp = EIF2[nl+nb].strip()
                    if (tmp  == ''):
                        pass
                    tmp2 = tmp.split()
                    if (len(tmp2) == 3):
                        nx += 1
                        M.append(tmp2)
                    else:
                        sys.exit("ERROR! CELL_PARAMETERS should be a 3 x 3\
                                matrix!!!!!\n")
                    nb += 1
                break
        CP = zeros((3,3))
        if (nx < 3):
            sys.exit('\n.... Oops ERROR: "CELL_PARAMETERS" are NOT complete in the input file !?!?!?'\
                     '\n                 Visit http://www.quantum-espresso.org \n')
        for i in range(3):
            for j in range(3):
                CP[i,j] = M[i][j]
        celldm1 = linalg.norm(CP[0,:])
        CP /= celldm1
        celldm1 /= 0.5292
    #-- Cubic structures ------------------------------------------------------------------------------
    if (ibrav == 1 or ibrav == 2 or ibrav == 3):
        celldm2 = 1. 
        celldm3 = 1. 
        celldm4 = 0.
        celldm5 = 0.
        celldm6 = 0.

        CP = zeros((3,3))
        if (ibrav == 1): # cP
            CP[0,0] = 1.
            CP[0,1] = 0.
            CP[0,2] = 0.
            CP[1,0] = 0.
            CP[1,1] = 1.
            CP[1,2] = 0.
            CP[2,0] = 0.
            CP[2,1] = 0.
            CP[2,2] = 1.
        if (ibrav == 2): # cF
            CP[0,0] =-.5
            CP[0,1] = 0.
            CP[0,2] = .5
            CP[1,0] = 0.
            CP[1,1] = .5
            CP[1,2] = .5
            CP[2,0] =-.5
            CP[2,1] = .5
            CP[2,2] = 0.
        if (ibrav == 3): # cI
            CP[0,0] = .5
            CP[0,1] = .5
            CP[0,2] = .5
            CP[1,0] =-.5
            CP[1,1] = .5
            CP[1,2] = .5
            CP[2,0] =-.5
            CP[2,1] =-.5
            CP[2,2] = .5
    #---Hexagonal structures---------------------------------------------------------------------------
    if (ibrav == 4):
        if (SYSTEM.lower().find('celldm(3)') == -1):
            sys.exit('\n.... Oops ERROR: "celldm(3)" must be specified for Hexagonal system !?!?!?'\
                     '\n                 Visit http://www.quantum-espresso.org \n')
        for i, key in enumerate(SYSTEMlist):
            if (key == 'celldm(3)'):
                celldm3 = float(SYSTEMlist[i+2])
        celldm2 = 1. 
        celldm4 = 0.
        celldm5 = 0.
        celldm6 =-.5

        CP      = zeros((3,3))
        CP[0,0] = 1.
        CP[0,1] = 0.
        CP[0,2] = 0.
        CP[1,0] =-.5
        CP[1,1] = sqrt(3.)/2.
        CP[1,2] = 0.
        CP[2,0] = 0.
        CP[2,1] = 0.
        CP[2,2] = celldm3

    #---Trigonal or Rhombohedragonal structures--------------------------------------------------------
    if (ibrav == 5):
        if (SYSTEM.lower().find('celldm(4)') == -1):
            sys.exit('\n.... Oops ERROR: "celldm(4)" must be specified for Trigonal system !?!?!?'\
                     '\n                 Visit http://www.quantum-espresso.org \n')
        for i, key in enumerate(SYSTEMlist):
            if (key == 'celldm(4)'):
                celldm4 = float(SYSTEMlist[i+2])
        celldm2 = 1. 
        celldm3 = 1.
        if (celldm4 < -1 or celldm4 > 1.):
            sys.exit('\n.... Oops ERROR: "celldm(4)" is WRONG !?!?!?    \n')
        celldm5 = celldm4 
        celldm6 = celldm4

        CP      = zeros((3,3))
        CP[0,0] = sqrt((1.-celldm4)/2.)
        CP[0,1] =-CP[0,0]/sqrt(3.)
        CP[0,2] = sqrt(1.-(2./3.*(1.-celldm4)))
        CP[1,0] = 0.
        CP[1,1] = 2.*CP[0,0]/sqrt(3.)
        CP[1,2] = CP[0,2]
        CP[2,0] =-CP[0,0]
        CP[2,1] = CP[0,1]
        CP[2,2] = CP[0,2]

    #---Tetragonal structures--------------------------------------------------------------------------
    if (ibrav == 6 or ibrav == 7):
        if (SYSTEM.lower().find('celldm(3)') == -1):
            sys.exit('\n.... Oops ERROR: "celldm(3)" must be specified for Tetragonal system !?!?!?'\
                     '\n                 Visit http://www.quantum-espresso.org \n')
        for i, key in enumerate(SYSTEMlist):
            if (key == 'celldm(3)'):
                celldm3 = float(SYSTEMlist[i+2])
        celldm2 = 1.
        celldm4 = .0 
        celldm5 = .0
        celldm6 = .0

        CP = zeros((3,3))
        if (ibrav == 6):
            CP[0,0] = 1.
            CP[0,1] = 0.
            CP[0,2] = 0.
            CP[1,0] = 0.
            CP[1,1] = 1.
            CP[1,2] = 0.
            CP[2,0] = 0.
            CP[2,1] = 0.
            CP[2,2] = celldm3
        if (ibrav == 7):
            CP[0,0] = 0.5
            CP[0,1] =-0.5
            CP[0,2] = 0.5*celldm3
            CP[1,0] = 0.5
            CP[1,1] = 0.5
            CP[1,2] = 0.5*celldm3
            CP[2,0] =-0.5
            CP[2,1] =-0.5
            CP[2,2] = 0.5*celldm3

    #---Orthorhombic structures------------------------------------------------------------------------
    celldmlist = ['celldm(2)','celldm(3)']
    if (ibrav == 8 or ibrav == 9 or ibrav == 10 or ibrav == 11):
        for celldmi in celldmlist:
            if (SYSTEM.lower().find(celldmi) == -1):
                sys.exit('\n.... Oops ERROR: "'+ celldmi +'" must be specified for Orthorhombic system !?!?!?'\
                         '\n                 Visit http://www.quantum-espresso.org \n')
        for i, key in enumerate(SYSTEMlist):
            if (key == 'celldm(2)'):
                celldm2 = float(SYSTEMlist[i+2])
        for i, key in enumerate(SYSTEMlist):
            if (key == 'celldm(3)'):
                celldm3 = float(SYSTEMlist[i+2])
        celldm4 = .0
        celldm5 = .0
        celldm6 = .0

        CP = zeros((3,3))
        if (ibrav == 8):  # Orthorhombic
            CP[0,0] = 1.
            CP[0,1] = 0.
            CP[0,2] = 0.
            CP[1,0] = 0.
            CP[1,1] = celldm2
            CP[1,2] = 0.
            CP[2,0] = 0.
            CP[2,1] = 0.
            CP[2,2] = celldm3
        if (ibrav == 9):  # oC
            CP[0,0] = 0.5
            CP[0,1] = 0.5*celldm2
            CP[0,2] = 0.
            CP[1,0] =-0.5
            CP[1,1] = 0.5*celldm2
            CP[1,2] = 0.
            CP[2,0] = 0.
            CP[2,1] = 0.
            CP[2,2] = celldm3
        if (ibrav == 10):  # oF
            CP[0,0] = 0.5
            CP[0,1] = 0.
            CP[0,2] = 0.5*celldm3
            CP[1,0] = 0.5
            CP[1,1] = 0.5*celldm2
            CP[1,2] = 0.
            CP[2,0] = 0.
            CP[2,1] = 0.5*celldm2
            CP[2,2] = 0.5*celldm3
        if (ibrav == 11):  # oI
            CP[0,0] = 0.5
            CP[0,1] = 0.5*celldm2
            CP[0,2] = 0.5*celldm3
            CP[1,0] =-0.5
            CP[1,1] = 0.5*celldm2
            CP[1,2] = 0.5*celldm3
            CP[2,0] =-0.5
            CP[2,1] =-0.5*celldm2
            CP[2,2] = 0.5*celldm3

    #---Monoclinic structures--------------------------------------------------------------------------
    celldmlist = ['celldm(2)','celldm(3)','celldm(4)']
    if (ibrav == 12 or ibrav == 13):
        for celldmi in celldmlist:
            if (SYSTEM.lower().find(celldmi) == -1):
                sys.exit('\n.... Oops ERROR: "'+celldmi+'" must be specified for Monoclinic system !?!?!?'\
                         '\n                 Visit http://www.quantum-espresso.org \n')
        for i, key in enumerate(SYSTEMlist):
            if (key == 'celldm(2)'):
                celldm2 = float(SYSTEMlist[i+2])
        for i, key in enumerate(SYSTEMlist):
            if (key == 'celldm(3)'):
                celldm3 = float(SYSTEMlist[i+2])
        for i, key in enumerate(SYSTEMlist):
            if (key == 'celldm(4)'):
                celldm4 = float(SYSTEMlist[i+2])
        if (celldm4 < -1 or celldm4 > 1.):
            sys.exit('\n.... Oops ERROR: "celldm(4)" is WRONG !?!?!?    \n')
        celldm5 = .0
        celldm6 = .0

        CP = zeros((3,3))
        if (ibrav == 12):  # mP
            CP[0,0] = 1.
            CP[0,1] = 0.
            CP[0,2] = 0.
            CP[1,0] = celldm2*celldm4
            CP[1,1] = celldm2*sqrt(1.-celldm4*celldm4)
            CP[1,2] = 0.
            CP[2,0] = 0.
            CP[2,1] = 0.
            CP[2,2] = celldm3
        if (ibrav == 13):  # mS
            CP[0,0] = 0.5
            CP[0,1] = 0.
            CP[0,2] =-0.5*celldm3
            CP[1,0] = celldm2*celldm4
            CP[1,1] = celldm2*sqrt(1.-celldm4*celldm4)
            CP[1,2] = 0.
            CP[2,0] = 0.5
            CP[2,1] = 0.
            CP[2,2] = 0.5*celldm3

    #---Triclinic structures---------------------------------------------------------------------------
    celldmlist = ['celldm(2)','celldm(3)','celldm(4)','celldm(5)','celldm(6)']
    if (ibrav == 14):
        for celldmi in celldmlist:
            if (SYSTEM.lower().find(celldmi) == -1):
                sys.exit('\n.... Oops ERROR: "'+celldmi+'" must be specified for Triclinic system !?!?!?'\
                         '\n                 Visit http://www.quantum-espresso.org \n')
        for i, key in enumerate(SYSTEMlist):
            if (key == 'celldm(2)'):
                celldm2 = float(SYSTEMlist[i+2])
        for i, key in enumerate(SYSTEMlist):
            if (key == 'celldm(3)'):
                celldm3 = float(SYSTEMlist[i+2])
        for i, key in enumerate(SYSTEMlist):
            if (key == 'celldm(4)'):
                celldm4 = float(SYSTEMlist[i+2])
        if (celldm4 < -1 or celldm4 > 1.):
            sys.exit('\n.... Oops ERROR: "celldm(4)" is WRONG !?!?!?    \n')
        for i, key in enumerate(SYSTEMlist):
            if (key == 'celldm(5)'):
                celldm5 = float(SYSTEMlist[i+2])
        if (celldm5 < -1 or celldm5 > 1.):
            sys.exit('\n.... Oops ERROR: "celldm(5)" is WRONG !?!?!?    \n')
        for i, key in enumerate(SYSTEMlist):
            if (key == 'celldm(6)'):
                celldm6 = float(SYSTEMlist[i+2])
        if (celldm6 < -1 or celldm6 > 1.):
            sys.exit('\n.... Oops ERROR: "celldm(6)" is WRONG !?!?!?    \n')
        
        CP      = zeros((3,3))
        CP[0,0] = 1.
        CP[0,1] = 0.
        CP[0,2] = 0.
        CP[1,0] = celldm2*celldm6
        CP[1,1] = celldm2*sqrt(1.-celldm6**2.)
        CP[1,2] = 0.
        CP[2,0] = celldm3*celldm5
        CP[2,1] =(celldm3*(celldm4-celldm5*celldm6))/(sqrt(1.-celldm6**2.))
        CP[2,2] = celldm3*sqrt(1.-celldm4**2.-celldm5**2.-celldm6**2.+\
                  2.*celldm4*celldm5*celldm6)/(sqrt(1.-celldm6**2.))

    #--------------------------------------------------------------------------------------------------
    for i, key in enumerate(SYSTEMlist):
        if (key=='ibrav'):
            SYSTEMlist[i+2] = '0'

    celldmlist = ['celldm(2)','celldm(3)','celldm(4)','celldm(5)','celldm(6)']
    for celldmi in celldmlist:
        if (SYSTEM.lower().find(celldmi) != -1):
            for i, key in enumerate(SYSTEMlist):
                if (key==celldmi):
                    SYSTEMlist.pop(i)
                    SYSTEMlist.pop(i)
                    SYSTEMlist.pop(i)

    if (SYSTEM.lower().find('nat') == -1):
        sys.exit('\n.... Oops ERROR: "nat" must be specified in "&SYSTEM" NAMELIST !?!?!?'\
                 '\n                 Visit http://www.quantum-espresso.org \n')
    for i, key in enumerate(SYSTEMlist):
        if (key == 'nat'):
            nat = int(SYSTEMlist[i+2])

    if (SYSTEM.lower().find('ntyp') == -1):
        sys.exit('\n.... Oops ERROR: "ntyp" must be specified in the "&SYSTEM" NAMELIST !?!?!?'\
                 '\n                 Visit http://www.quantum-espresso.org \n')
    for i, key in enumerate(SYSTEMlist):
        if (key == 'ntyp'):
            ntyp = int(SYSTEMlist[i+2])
    #--------------------------------------------------------------------------------------------------

    #%!%!%--- Reading the &ELECTRONS NAMELIST ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!
    TMP = EIF[EIF.upper().find('&ELECTRONS')+1:-1]
    TMP = TMP.replace('ATOMIC_SPECIES','&ATOMIC_SPECIES')
    ELECTRONS = TMP[TMP.upper().find('ELECTRONS'):TMP.find('&')].strip()
    ELECTRONS = ELECTRONS.replace(',',' ')
    ELECTRONS = ELECTRONS.replace('=',' = ')
    ELECTRONSlist = ELECTRONS.strip().split()
    #--------------------------------------------------------------------------------------------------

    #%!%!%--- Reading the &IONS NAMELIST ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%
    if (EIF.upper().find('&IONS') != -1):
        TMP = EIF[EIF.upper().find('&IONS')+1:-1]
        TMP = TMP.replace('ATOMIC_SPECIES','&ATOMIC_SPECIES')
        IONS= TMP[TMP.upper().find('IONS'):TMP.find('&')].strip()

        IONS     = IONS.replace(',',' ')
        IONS     = IONS.replace('=',' = ')
        IONSlist = IONS.strip().split()

    else:    
        IONSlist = ['&IONS','ion_dynamics','=',"'bfgs'",'/']
    #--------------------------------------------------------------------------------------------------

    #%!%!%--- Reading the ATOMIC_SPECIES, ATOMIC_POSITIONS, and K_POINT INPUT_CARDS ---%!%!%!%!%!%!%!%!
    ATOMIC_SPECIES = EIF[EIF.upper().find('ATOMIC_SPECIES'):EIF.upper().find('ATOMIC_POSITIONS')-1].strip()

    for nl, line in enumerate(EIF.split('\n')):
        if (line.find('ATOMIC_POSITIONS') != -1): break
    if (line.lower().find('crystal') == -1):
            sys.exit('\n.... Oops SORRY: "ATOMIC_POSITIONS" must be specified in "crystal" coordinate'\
                 '\n                 alat, bohr, and angstrom have NOT been implemented yet.\n')

    fi = open(INF, 'r')
    for i in range(nl+1):
        fi.readline()
    ATPO = []
    nl   = 0
    while (nl < nat):
        line = fi.readline()
        if (line == ''): break 
        line = line.strip().split()
        if (len(line) == 4):
            nl +=1
            ATPO.append(line)
        elif (len(line) == 0): pass
        else:
            sys.exit('\n.... Oops ERROR: "ATOMIC_POSITIONS" are NOT defined correctly !?!?!?'\
                     '\n                 Visit http://www.quantum-espresso.org \n')
    fi.close()
    if (nl < nat):
        sys.exit('\n.... Oops ERROR: "ATOMIC_POSITIONS" are NOT complete in the input file !?!?!?\
                  \n                 Visit http://www.quantum-espresso.org \n')
    OATPO = []
    while (len(ATPO) > 0):
        natpo = len(ATPO)
        ATYP  = ATPO[natpo-1][0]
        for i in range(natpo-1,-1,-1):
            if (ATYP == ATPO[i][0]):
                OATPO.append(ATPO[i])
                ATPO.pop(i)

    K_POINTS = EIF[EIF.upper().find('K_POINTS'):-1].strip()

    #--------------------------------------------------------------------------------------------------

    #%!%!%--- Converting the QUANTUM-ESPRESSO input file to exiting input file ---%!%!%!%!%!%!%!%!%!%!%
    #fmt  = '%15.10f'
    #Xi = open('input.xml','w')
    #print >>Xi,'<input>'
    #print >>Xi,'   <structure >'
    #print >>Xi,'      <crystal scale="'+str(celldm1)+'">'
    #for i in range(3):
    #    print >>Xi,'         <basevect>',fmt%CP[i,0],fmt%CP[i,1],fmt%CP[i,2],'</basevect>'
    #print >>Xi,'      </crystal>'

    #atom = str(OATPO[nat-1][0])
    #print >>Xi,'      <species speciesfile = "'+atom+'">'
    #for i in range(nat-1,-1,-1):
    #    if (atom == str(OATPO[i][0])):
    #        print >>Xi,'         <atom coord=" ',fmt%(float(OATPO[i][1]))\
    #                                            ,fmt%(float(OATPO[i][2]))\
    #                                            ,fmt%(float(OATPO[i][3])),' "/>'
    #    else:
    #        print >>Xi,'      </species>'
    #        atom = str(OATPO[i][0])
    #        print >>Xi,'      <species speciesfile = "'+atom+'">'
    #        print >>Xi,'         <atom coord=" ',fmt%(float(OATPO[i][1]))\
    #                                            ,fmt%(float(OATPO[i][2]))\
    #                                            ,fmt%(float(OATPO[i][3])),' "/>'
    #print >>Xi,'      </species>'
    #print >>Xi,'   </structure>'
    #print >>Xi,'</input>'
    #Xi.close()
    #os.system("xsltproc $ElaSticROOT/exciting2sgroup.xsl input.xml > sgroup.in;sgroup sgroup.in > sgroup.out")
    #--------------------------------------------------------------------------------------------------

    #%!%!%--- Writing the "sgroup.in" file ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%
    a1 = celldm1 * sqrt(CP[0,0]**2 + CP[0,1]**2 + CP[0,2]**2)
    a2 = celldm1 * sqrt(CP[1,0]**2 + CP[1,1]**2 + CP[1,2]**2)
    a3 = celldm1 * sqrt(CP[2,0]**2 + CP[2,1]**2 + CP[2,2]**2)
    alpha = degrees(math.acos((CP[1,0]*CP[2,0]+CP[1,1]*CP[2,1]+CP[1,2]*CP[2,2])*celldm1**2/(a2*a3)))
    beta  = degrees(math.acos((CP[0,0]*CP[2,0]+CP[0,1]*CP[2,1]+CP[0,2]*CP[2,2])*celldm1**2/(a1*a3)))
    gamma = degrees(math.acos((CP[0,0]*CP[1,0]+CP[0,1]*CP[1,1]+CP[0,2]*CP[1,2])*celldm1**2/(a1*a2)))

    #--------------------------------------------------------------------------------------------------

    #%!%!%--- Writing the "ElaStic_PW.in" file ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%
    pwi = open('ElaStic_PW.in', 'w')

    if (len(title) != 0):
        print(title,file=pwi)

    print('&CONTROL',file=pwi)
    for i in range(1,len(CONTROLlist)-1,3):
        if (len(CONTROLlist[i]) < 17):
            print('   '+'%-16s'%(CONTROLlist[i])+' = '+CONTROLlist[i+2],file=pwi)
        else:
            print('   '+CONTROLlist[i]+' = '+CONTROLlist[i+2],file=pwi)
    print(' /',file=pwi)

    print('&SYSTEM',file=pwi)
    for i in range(1,len(SYSTEMlist)-1,3):
        if (len(SYSTEMlist[i]) < 17):
            print('   '+'%-16s'%(SYSTEMlist[i])+' = '+SYSTEMlist[i+2],file=pwi)
        else:
            print('   '+SYSTEMlist[i]+' = '+SYSTEMlist[i+2],file=pwi)
    if (ibrav == 0):
        print('   '+'%-16s'%("celldm(1)")+' = '+str(celldm1),file=pwi)
    print(' /',file=pwi)

    print('&ELECTRONS',file=pwi)
    for i in range(1,len(ELECTRONSlist)-1,3):
        if (len(SYSTEMlist[i]) < 17):
            print('   '+'%-16s'%(ELECTRONSlist[i])+' = '+ELECTRONSlist[i+2],file=pwi)
        else:
            print('   '+ELECTRONSlist[i]+' = '+ELECTRONSlist[i+2],file=pwi)
    print(' /',file=pwi)

    print('&IONS',file=pwi)
    for i in range(1,len(IONSlist)-1,3):
        if (len(IONSlist[i]) < 17):
            print('   '+'%-16s'%(IONSlist[i])+' = '+IONSlist[i+2],file=pwi)
        else:
            print('   '+IONSlist[i]+' = '+IONSlist[i+2],file=pwi)
    print(' /',file=pwi)

    print(ATOMIC_SPECIES,file=pwi)

    print('ATOMIC_POSITIONS (crystal)',file=pwi)
    for i in range(nat-1,-1,-1):
        print('   '+'%-3s'%(OATPO[i][0]), '%15.10f'%(float(OATPO[i][1])), '%15.10f'%(float(OATPO[i][2])), \
                                                                                '%15.10f'%(float(OATPO[i][3])),\
                                                                                file=pwi)

    print(K_POINTS,file=pwi)

    print('CELL_PARAMETERS {alat}',file=pwi)
    for i in range(3):
        print('%15.10f'%CP[i,0], '%15.10f'%CP[i,1], '%15.10f'%CP[i,2],file=pwi)
    pwi.close()

    fi  = open('ElaStic_PW.in','r')
    TMPi= fi.read()
    TMP = TMPi[TMPi.find('&CONTROL'):TMPi.find('CELL_PARAMETERS')].strip()
    TMP = TMP + '\nCELL_PARAMETERS {alat}'
    fi.close()
    #--------------------------------------------------------------------------------------------------

    #%!%!%--- Calculating the Space-Group Number and classifying it ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!
    
    LC, SGN = calcSGroupNumber(nat, OATPO, a1, a2, a3, alpha, beta, gamma)
    print(a1, a2, a3, alpha, beta, gamma)
    print(OATPO)
    if (ibrav != 0):
        if (ibrav == 4 and 143 <= SGN and SGN <= 167): ibrav = 5

        if (ibravDic[str(ibrav)] != LT_Dic[LC]): 
            sys.exit('\n.... Oops ERROR: ibrav = '+ str(ibrav) +', It means "'+ibravDic[str(ibrav)]+'" structure.'\
                     '\n                 But this structure can be represented by "'+LT_Dic[LC]+'" system.'\
                     '\n                 THEY ARE NOT COMPATIBLE. Please Look at sgroup.out\n')
    #--------------------------------------------------------------------------------------------------
    
    #%!%!%--- Writing the "INFO_ElaStic" file ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!
    
    INFO= open('INFO_ElaStic','w')
    print( 'Order of elastic constants      =', ordr           ,\
                '\nMethod of calculation           =', mthd           ,\
                '\nDFT code name                   = Quantum ESPRESSO',\
                '\nSpace-group number              =', SGN            ,\
                '\nVolume of equilibrium unit cell =', abs(celldm1**3*np.linalg.det(CP)), '[a.u^3]'  ,\
                '\nMaximum Lagrangian strain       =', mdr            ,\
                '\nNumber of distorted structures  =', NoP,file=INFO)
    INFO.close()
    #--------------------------------------------------------------------------------------------------
    
    
    return LC, CP, TMP, [], [], []
    
    
    
def readStructureCP2K():
    #%!%!%--- Checking the input file exist ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!
    INF = input('\n>>>> Please enter the name of the CP2K input file: ')
    if (os.path.exists(INF.strip()) == False):
        sys.exit('\n.... Oops ERROR: There is NO '+ INF +' file !?!?!?    \n')
    fi = open(INF.strip(), 'r')
    TMP = repr(fi.read())
    fi.close()
    #--------------------------------------------------------------------------------------------------
    params = np.array([float(i) for i in TMP[TMP.index("ABC")+3:(TMP[TMP.index("ABC")+3:]).index(r"\n") + TMP.index("ABC")+3].split()])
    
    angles = np.array([float(i) for i in TMP[TMP.index("ALPHA_BETA_GAMMA")+16:(TMP[TMP.index("ALPHA_BETA_GAMMA")+16:]).index(r"\n") + TMP.index("ALPHA_BETA_GAMMA")+16].split()]) / 180 * np.pi
    
    
    
    # read the xyz file
    atoms = []
    with open(f"{xyz_file}", 'r') as file:
        for i, line in enumerate(file):
            if i > 1:
                line = line.split()
                temp = np.matmul(np.transpose(np.linalg.inv(param2vec(params, angles))), np.array([float(line[1]), float(line[2]), float(line[3])]))
                atoms.append([line[0], temp[0], temp[1], temp[2]])
                
                
    LC, SGN = calcSGroupNumber(len(atoms), atoms, params[0], params[1], params[2], angles[0], angles[1], angles[2])   
    
    #%!%!%--- Writing the "INFO_ElaStic" file ---%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!
    CP = param2vec(params, angles)
    INFO= open('INFO_ElaStic','w')
    print( 'Order of elastic constants      =', ordr           ,\
                '\nMethod of calculation           =', mthd           ,\
                '\nDFT code name                   = CP2K',\
                '\nSpace-group number              =', SGN            ,\
                '\nVolume of equilibrium unit cell =', abs(np.linalg.det(CP)), '[a.u^3]'  ,\
                '\nMaximum Lagrangian strain       =', mdr            ,\
                '\nNumber of distorted structures  =', NoP,file=INFO)
    INFO.close()
    #--------------------------------------------------------------------------------------------------
    
    return LC, CP, TMP, atoms, params, angles
    
    
def makeStructures(LC, CP, TMP, OATPO, params, angles):
    #%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%#
    #%!% ----------------------------------- Structures maker ----------------------------------- %!%!#
    #%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%!%#
    #mthd ordr LC ptn CP mdr
    Lag_strain_list = getLagStrainList(mthd, ordr, LC)
    M_old= CP
    fdis = open('Distorted_Parameters','w')
    cont1= 0
    for i in Lag_strain_list:
        Ls_list= Ls_Dic[i]

        cont1  = cont1 + 1
        if (cont1 < 10):
            Dstn = 'Dst0'+str(cont1)
        else:
            Dstn = 'Dst' +str(cont1)

        os.mkdir(Dstn)
        os.chdir(Dstn)

        print(Dstn+', Lagrangian strain = ' + Ls_str[i],file=fdis)

        cont2 = 0
        for s in range(-ptn, ptn+1):
            r = mdr*s/ptn
            if (s==0):
                if (mthd == 'Energy'): r = 0.0001
                if (mthd == 'Stress'): r = 0.00001

            Ls = zeros(6)
            for i in range(6):
                Ls[i] = Ls_list[i]
            Lv = r*Ls

            #--- Lagrangian strain to physical strain (eta = eps + 0.5*eps*esp) -----------------------
            eta_matrix      = zeros((3,3))

            eta_matrix[0,0] = Lv[0]
            eta_matrix[0,1] = Lv[5]/2.
            eta_matrix[0,2] = Lv[4]/2.
            
            eta_matrix[1,0] = Lv[5]/2.
            eta_matrix[1,1] = Lv[1]
            eta_matrix[1,2] = Lv[3]/2.

            eta_matrix[2,0] = Lv[4]/2.
            eta_matrix[2,1] = Lv[3]/2.
            eta_matrix[2,2] = Lv[2]

            norm       = 1.0
            eps_matrix = eta_matrix
            if (linalg.norm(eta_matrix) > 0.7):
                sys.exit('\n.... Oops ERROR: Too large deformation!\n') 

            while( norm > 1.e-10 ):
                x          = eta_matrix - dot(eps_matrix, eps_matrix)/2.
                norm       = linalg.norm(x - eps_matrix)      
                eps_matrix = x

            #--- Calculating the M_new matrix ---------------------------------------------------------
            i_matrix   = array([[1., 0., 0.],
                                [0., 1., 0.], 
                                [0., 0., 1.]])
            def_matrix = i_matrix + eps_matrix
            M_new      = dot(M_old, def_matrix)
            #------------------------------------------------------------------------------------------
            cont2 = cont2 + 1
            if (cont2 < 10):
                Dstn_cont2 = Dstn +'_0'+str(cont2)
            else:
                Dstn_cont2 = Dstn +'_' +str(cont2)

            print(Dstn_cont2 + ',  eta = ' + str(r),file=fdis)
            for j in range(3):
                print('V'+str(j+1)+' --=>', '%15.10f'%(M_new[j,0]), '%15.10f'%(M_new[j,1]), '%15.10f'%(M_new[j,2]),file=fdis)
            print('\n',file=fdis)

            #--- Writing the structure file -----------------------------------------------------------
            os.mkdir(Dstn_cont2)
            os.chdir(Dstn_cont2)
            
            if driver == "CP2K":
                writeCP2K(Dstn_cont2, TMP, M_new, OATPO, params, angles)
            else:
                writeQE(Dstn_cont2, TMP, M_new)
            
            os.chdir('../')
        os.chdir('../')
    fdis.close()
    #--------------------------------------------------------------------------------------------------



if driver == "ESPRESSO":
    LC, CP, TMP, OATPO, params, angles = readStructureQE()
    makeStructures(LC, CP, TMP, OATPO, params, angles)
    os.system(f"mkdir Structures_{driver}")
    os.system(f"cp Dst??/Dst??_??/Dst??_??.in Structures_{driver}/")
    
elif driver == "CP2K":
    LC, CP, TMP, OATPO, params, angles = readStructureCP2K()
    makeStructures(LC, CP, TMP, OATPO, params, angles)
    os.system(f"mkdir Structures_{driver}")
    os.system(f"cp Dst??/Dst??_??/Dst??_??.inp Structures_{driver}/")
    os.system(f"cp Dst??/Dst??_??/Dst??_??.xyz Structures_{driver}/")

